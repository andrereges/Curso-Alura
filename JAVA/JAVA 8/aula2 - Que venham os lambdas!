== CLASSE ANÔNIMA ==
Classes anônimas são usadas frequentemente para implementar listeners e callbacks
que não terão reaproveitamento.

palavras.forEach(new Consumer<String>() {
    public void accept(String s) {
        System.out.println(s);
    }
});

== LAMBDA ==

A sintaxe do lambda traz uma forma implementar interfaces de forma mais sucinta, menos verbosa e 
com menos dificuldades.

=== Interface Funcional ===
Possui apenas 1 único método abstrato. Além desse método ela pode ter outros métodos, 
contanto que sejam default..

Essa sintaxe funciona para qualquer interface que tenha apenas um método abstrato.
Quando há apenas um parâmetro, tiramos os parênteses.

=== Passo a Passo LAMBDA ===

1- Transformar em classe anônima.
2- Remove quase tudo da assinatura do método, tiramos o tipo do parâmetro e add "->".
Exemplo palavras.sort((s1, s2) -> { código });
3- Se caso for um argumento, fica assim : palavras.sort(s1 -> { código });


=== Interface com 1 argumento ===

___________Antes_________________________
Consumer<String> consumidor = new ConsumidorDeString();
palavras.forEach(consumidor);

class ConsumidorDeString implements Consumer<String> {
    public void accept(String s) {
        System.out.println(s);
    }
}
___________Meio Classe anônima___________
palavras.forEach(new Consumer<String>() {
    public void accept(String s) {
        System.out.println(s);
    }
});
___________Depois________________________
palavras.forEach(s -> System.out.println(s));



=== Interface com 2 argumentos ===

___________Antes_________________________
Comparator<String> comparador = new ComparadorDeStringPorTamanho();
		palavras.sort(comparador);

class ComparadorDeStringPorTamanho implements Comparator<String> {
	@Override
	public int compare(String s1, String s2) {
        if(s1.length() < s2.length()) 
            return -1;
        if(s1.length() > s2.length()) 
            return 1;
        return 0;
    }
}

___________Meio Classe anônima___________
palavras.sort(new Comparator<String>() {
    public int compare(String s1, String s2) {
        if (s1.length() < s2.length())
            return -1;
        if (s1.length() > s2.length())
            return 1;
        return 0;
    }
});
___________Depois________________________
palavras.sort((s1, s2) -> {
    if (s1.length() < s2.length())
        return -1;
    if (s1.length() > s2.length())
        return 1;
    return 0;
});

Outra forma de ordenar Strings por Quantidade de caracteres.
palavras.sort((s1, s2 ) -> Integer.compare(s1.length(), s2.length()));

___________Meio Classe anônima___________
new Thread(new Runnable() {

    @Override
    public void run() {
        System.out.println("Executando um Runnable");
    }

}).start();

___________Depois________________________
new Thread(()-> System.out.println("Executando um Runnable")).start();