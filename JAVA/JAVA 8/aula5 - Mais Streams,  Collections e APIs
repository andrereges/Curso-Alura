Os Streams possibilitam trabalhar com dados de uma maneira funcional.
Os Streams foram desenhados de uma forma a tirar proveito da programação funcional.

cursos.stream()
   .filter(c -> c.getAlunos() > 100)
   .findAny(); -> pega QUALQUER valor dos que foram filtrados, devolvendo um Optional<Curso>.

OPTIONAL -> É uma nova classe do Java 8. Com ela podemos trabalhar de maneira mais organizada
com possíveis valores null.

Optional<Curso> optional = cursos.stream()
   .filter(c -> c.getAlunos() > 100)
   .findAny();

optional.get(); -> Se não encontrar nada devolve uma exception.
optional.orElse(null); -> Devolve um curso, caso não houver nada ele devolve null.
optional.ifPresent(c -> System.out.println(c.getNome())); -> Evita null e exception

No dia a dia, não teríamos a variável temporária:

cursos.stream()
   .filter(c -> c.getAlunos() > 100)
   .findAny()
   .ifPresent(c -> System.out.println(c.getNome()));

=== Gerar uma coleção a partir de um Stream ===

Collectors -> cheio de factory methods que ajudam na criação de coletores.

    List<Curso> resultados = cursos.stream()
                                        .filter(c -> c.getAlunos() > 100)
                                        .collect(Collectors.toList());

Podiamos usar a mesma variável para armazenar a lista modificada, alterando a referência da lista antiga.

=== Exemplo complicado seria gerar Map<String, Integer> ===

Ele recebe duas Functions. A primeira indica o que vai ser a chave, e a segunda o que será o valor:

Map mapa = cursos 
            .stream() 
            .filter(c -> c.getAlunos() > 100) 
            .collect(Collectors.toMap(c -> c.getNome(), c -> c.getAlunos()));

Stream em paralelo -> parallelStream() - usa quantas threads precisar para fazer o trabalho.

=== TIRAR MÉDIA DA QTD ALUNOS DE TODOS OS CURSOS ===
cursos.stream()
					.mapToInt(Curso::getAlunos)
					.average()  // sum() soma, count conta.
					.ifPresent(System.out::println);

_____________Questões______________________________________________________________________________________
Ao utilizar o método findFirst() temos como retorno um Optional<Curso>. Porque?
Qual a vantagem de retornar um Optional no lugar de retornar um cursos diretamente?

Ganhamos muito com essa nova introdução. Assim não precisamos escrever aqueles diversos ifs 
garantindo que o objeto não é nulo, temos uma forma muito mais interessante de representar 
nossas intenções. A classe Optional nos oferece uma variedade imensa de novos métodos que nos 
permite trabalhar de forma funcional com nossos valores, tirando maior proveito dos novos recursos 
de default methods, lambdas e method reference.