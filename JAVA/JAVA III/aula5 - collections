== Collections ==

== ArrayList ==
    ArrayList<String> nomes = new ArrayList<String>(); -> ArrayList somente de String
    nomes.add("Jose"); -> adiciona Jose na primeira posição do ArrayList
    nomes.get(0); -> Jose 
    nomes.size() -> 1
    nomes.contains("Jose"); -> true
    Collections.sort(nomes); -> Ordena o ArrayList por ordem alfabética.
    Collections.reverse(list) -> Ordem inversa.
    Collections.shuffle -> Embaralhar todos os elementos.
    Collections.rotacionar(list, distance) -> rotacionar 

    Ordenar Objetos é necessário implementar Comparable<TipoObjecto> e add metodo:

    @Override
        public int compareTo(Conta outraConta) {
            
            if(this.saldo < outraConta.saldo) return -1; -> vem depois do saldo atual
            if(this.saldo > outraConta.saldo) return 1; vem antes do saldo atual
            return 0; saldo igual, só adiciona.
        }

== LinkedList ==
    List<String> nomes = new LinkedList<String>(); -> imprime valores repetidos
    nomes.add("Jose");
    nomes.add("Jose");

== HashSet ==
    Set<String> nomes = new HashSet<String>(); -> não imprime valores repetidos.
    nomes.add("Jose");
    nomes.add("Jose");
    Imprime só Jose 1 vez.
    size()
    Para objetos é necessário sobrescrever o metodo hasCode() e informar os atributos que não devem repetir.

== HashMap ==

    Gera um indice para cada objeto, se tiverem o msm id é selecionado o primeiro que aparecer.

    Map<Integer, Conta> contas = new HashMap<Integer, Conta>();
		Conta c1 = new ContaCorrente(124, "Andre", 600);
		
		contas.put(1, c1);
		
		System.out.println(contas.get(3).getSaldo());

== TreeSet ==

numeros.descendingSet() -> Ordena numero inversamente.


== Diferença entre List e Set ==

List -> imprime valores repetidos
Set -> não imprime valores repetidos.

== Comparação entre LinkedList e ArrayList ==

O LinkedList -> é bem mais rápido para add dados na lista.
== Random do pacote Util ==

Random r = new Random();
r.nextInt(numeroMaximoAleatorio);
r.nextDouble(); -> vai de 0 até 1, ex. 0.73

== Comparação entre ArrayList e HashSet == 

No caso das listas (ArrayList e LinkedList), a inserção é bem rápida e a busca muito lenta!
No caso dos conjuntos (TreeSet e HashSet), a inserção ainda é rápida, embora um pouco mais 
lenta do que a das listas. E a busca é muito rápida!


== Classe Banco com HashMap ==

public class Banco {
	
	private Map <String, Conta> contas = new HashMap<>();

	public void adiciona(Conta c) {
		this.contas.put(c.nome,c);
	}
	
	public Conta pega(int i) {
		return this.contas.get(i);
	}
	
	public int pegaQuantidadeDeContas() {
		return this.contas.size();
	}
	
	public Conta buscaPorNome(String nome) {
		
		return contas.get(nome);
	}

}